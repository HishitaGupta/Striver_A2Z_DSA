***Difference between "/n" and endl

"\n" -> Functionality -  
                         newline character
        Performance - faster
        Buffer Handling - No

endl -> Functionality -
                        manipulator
                        inserts a new line
                        flushes the output buffer (forces all buffered output to be displayed immediately)
        Performance -   slower (perform newline as well as buffer operation)
        Buffer Handling - Yes,(buffer flush operation can be expensive, especially in programs with frequent output operations.)


| Concept       | `\n`                 | `endl`                                |
| ------------- | -------------------- | ------------------------------------- |
| Line break    | ✅ Yes                | ✅ Yes                                 |
| Flush buffer  | ❌ No                 | ✅ Yes                                 |
| Performance   | ⚡ Fast               | 🐢 Slower (flush every time)          |
| Best use case | Most general outputs | Debugging, logging, real-time prompts |


Real-life Analogy
Imagine you're a waiter taking orders in a restaurant.

🍽️ \n – Just writing the order down:
You take multiple orders from customers and write them in your notepad (\n adds a line).

You wait until the notepad is full or you decide it’s time, then walk to the kitchen to deliver all the orders at once (buffered output).

✅ Fast, efficient.

🚶‍♂️ endl – Writing the order and immediately running to the kitchen:
Every time someone tells you an item, you write it down, and then immediately run to the kitchen to deliver it (endl = line break + flush).

🔁 Repeating this for every item? Exhausting and slow!

***use <bits/stdc++.h> - to include all libraries at once takes negligible time in comparison time taken to run a program

***DataTypes
int,long int,long long int -> int values 
float,double ,long double->decimal values
str->takes word before space (for full line use getline(cin,str))


****Range of DataTypes
int - 4 bytes - (-2^(32)/2)-1 to (2^(32)/2)-1 

***2d array
arr [3][5]-> 3 times 5 column array , row-col

***String also stores every character in terms of array indexs

***Functions - void , return , parameterised , non-parameterised
        pass by value - original memory address didnot go a copy of value goes
        pass by reference - real memory address goes into the function - ampersand in the parameter in function
                        array passed by reference by default but with all others like vector list we have to pass amperand sign.